[{"/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/index.js":"1","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/App.js":"2","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/reportWebVitals.js":"3","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/containers/Routes.js":"4","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/Style/LogoutStyle.js":"5","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/Abzeichen.js":"6","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/containers/Dashboard.js":"7","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/Style/Theme.js":"8","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/containers/dataProvider.js":"9","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/Touren.js":"10","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/Exponate.js":"11","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/User.js":"12","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/ProfilePicutre.js":"13","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/Codes.js":"14","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/Tour_Feedback.js":"15"},{"size":620,"mtime":1608462829115,"results":"16","hashOfConfig":"17"},{"size":4099,"mtime":1611647309397,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1608462829115,"results":"19","hashOfConfig":"17"},{"size":704,"mtime":1609672701770,"results":"20","hashOfConfig":"17"},{"size":1896,"mtime":1608462829115,"results":"21","hashOfConfig":"17"},{"size":3025,"mtime":1611309586776,"results":"22","hashOfConfig":"17"},{"size":4716,"mtime":1611307680788,"results":"23","hashOfConfig":"17"},{"size":472,"mtime":1610037043118,"results":"24","hashOfConfig":"17"},{"size":4644,"mtime":1611645416097,"results":"25","hashOfConfig":"17"},{"size":10131,"mtime":1611415192454,"results":"26","hashOfConfig":"17"},{"size":7393,"mtime":1611645416097,"results":"27","hashOfConfig":"17"},{"size":3070,"mtime":1611647640278,"results":"28","hashOfConfig":"17"},{"size":1662,"mtime":1611307680788,"results":"29","hashOfConfig":"17"},{"size":1171,"mtime":1611645416097,"results":"30","hashOfConfig":"17"},{"size":1582,"mtime":1611647244428,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"zx3xcf",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"35"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"35"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"35"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/index.js",["71","72"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n",["73","74"],"/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/App.js",[],"/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/reportWebVitals.js",[],"/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/containers/Routes.js",["75","76"],"import React from 'react'\nimport { BrowserRouter as Router,\n    Route, Switch, Link } from \"react-router-dom\";\nimport Admins from './Admins';\nimport Exponate from './Exponate';\nimport Touren from './Touren';\n\n\n\n\nexport default class Routes extends React.Component {\n    render() {\n        return(\n            <div>\n            <Switch>\n           <Route exact path=\"/Touren\" render={() => (\n               <Touren></Touren>\n           )}/>\n              \n         \n          <Route exact path=\"/Exponate\">\n               <Exponate></Exponate>\n          </Route>\n          <Route exact path=\"/User\">\n                <Admins></Admins>\n            </Route>\n        </Switch>\n        </div>\n        )\n    }\n}",["77","78"],"/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/Style/LogoutStyle.js",["79","80","81"],"import React, { Component } from 'react'\nimport AcUnitIcon from '@material-ui/icons/AcUnit';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport { CssBaseline } from '@material-ui/core';\n\nconst StyledMenu = withStyles()\n  ((props) => (\n    <Menu \n      elevation={0}\n      getContentAnchorEl={null}\n      anchorOrigin={{\n        vertical: \"bottom\",\n      }}\n      transformOrigin={{\n        vertical: \"top\",\n        horizontal: \"center\"\n      }}\n      {...props}\n    />\n  ));\n\n  const StyledMenuItem = withStyles((theme) => ({\n    root: {\n      \"&:focus\": {\n        backgroundColor: theme.palette.primary.main,\n        \"& .MuiListItemIcon-root, & .MuiListItemText-primary\": {\n          color: theme.palette.common.white\n        }\n      }\n    }\n  }))(MenuItem);\n\nexport default function LogoutStyle() {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClose = () => {\n      setAnchorEl(null);\n    };\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n      };\n\n    return(\n        <div>\n            <Button onClick={handleClick}>\n                <AccountCircleIcon/>\n            </Button>\n\n            <StyledMenu\n            id=\"customized-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleClose}\n            >\n                <StyledMenuItem>\n                    <ListItemText primary=\"Abmelden\" onClick={blah}/>\n                </StyledMenuItem>\n            </StyledMenu>\n        </div>            \n    )    \n}\n\nfunction blah()  {\n    return(\n        alert('Sie sind abgemeldet')\n    )\n}","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/Abzeichen.js",["82","83","84","85","86","87"],"import React from 'react';\nimport {\n  List,\n  Datagrid,\n  TextField,\n  UrlField,\n  ImageField,\n  NumberField,\n  ReferenceField,\n  ImageInput,\n  NumberInput,\n  ReferenceInput,\n  SelectInput,\n  EditButton,\n  Edit,\n  SimpleForm,\n  TextInput,\n  Create,\n  SimpleShowLayout,\n  Show,\n  ArrayField,\n  SingleFieldList,\n  ReferenceArrayInput,\n  SelectArrayInput,\n} from 'react-admin';\n\n// edit expand component\nconst ImageShow = (props) => (\n  <Show\n    {...props}\n    /* disable the app title change when shown */\n    title=' '\n  >\n    <SimpleShowLayout>\n      {/* TODO: Show URL & image of related picture*/}\n      <ImageField source='picture' label='Abzeichen Bild' />\n      <ImageField\n        source='unlocked_picture'\n        label='freigeschaltete Profilbilder'\n      />\n      {/* TODO: Link to actual picture table to display connectes profile pictures \n      show as a list, if there is more than one profile picture for one badge?\n      <UrlField source='picture' label='Url' />\n      */}\n    </SimpleShowLayout>\n  </Show>\n);\n\n// list existing badges\nexport const AbzeichenList = (props) => (\n  <List {...props} title='Abzeichen'>\n    <Datagrid expand={<ImageShow />}>\n      <TextField source='id' label='ID' />\n      <TextField source='name' label='Name' />\n      <TextField source='picture' />\n      <NumberField source='cost' label='Kosten' />\n      <EditButton />\n    </Datagrid>\n  </List>\n);\n\n// edit badges\nexport const AbzeichenEdit = (props) => (\n  <Edit title='Verändere Verknüpfung' {...props}>\n    <SimpleForm>\n      <TextInput disabled source='id' />\n      <TextInput source='name' label='Name' />\n      {/* Select a new picture for the badge*/}\n      <ImageInput source='Abzeichen' accept='image/*'>\n        <ImageField source='picture' />\n      </ImageInput>\n      {/* TODO: Link to connected profile pictures and select by existing name/picture\n       (new profile pictures have to be added in the ProfilePicture database)*/}\n      <ReferenceInput\n        source='unlocked_picture'\n        reference='ProfilePicture'\n        label='freigeschaltete Profilbilder'\n      >\n        <SelectInput source='picture' />\n      </ReferenceInput>\n      <NumberInput source='cost' label='Kosten' />\n    </SimpleForm>\n  </Edit>\n);\n\n// create a new badge\nexport const AbzeichenCreate = (props) => (\n  <Create title='Lade Abzeichen hoch' {...props}>\n    <SimpleForm>\n      <TextInput disabled source='id' />\n      <TextInput source='name' label='Name' />\n      <ImageInput source='Badge' accept='image/*'>\n        <ImageField source='picture' />\n      </ImageInput>\n      {/* TODO: Link to connected profile pictures and select by existing name/picture\n       (new profile pictures have to be added in the ProfilePicture database)*/}\n      <ReferenceInput\n        source='unlocked_picture'\n        reference='ProfilePicture'\n        label='freigeschaltete Profilbilder'\n      >\n        <SelectInput source='$oid' />\n      </ReferenceInput>\n      <NumberInput source='cost' label='Kosten' />\n    </SimpleForm>\n  </Create>\n);\n","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/containers/Dashboard.js",["88","89"],"import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Title } from 'react-admin';\n//material UI imports\nimport Card from '@material-ui/core/Card';\nimport { Grid, Paper, Typography } from '@material-ui/core';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\n\n// style for the cards\nconst useStyles = makeStyles(() => ({\n  card: {\n    maxWidth: '100%',\n    margin: 'auto',\n    transition: '0.3s',\n    color: '#000',\n    backgroundColor: 'transparent',\n    //   boxShadow: 'none',\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n    marginLeft: '50%',\n    margin: 'auto',\n    display: 'flex',\n    objectFit: 'contain',\n    right: 0,\n    bottom: 0,\n  },\n  content: {\n    textAlign: 'left',\n  },\n  heading: {\n    fontWeight: 'bold',\n  },\n  subheading: {\n    lineHeight: 1.8,\n  },\n  root: {\n    minWidth: '90%',\n  },\n  pos: {\n    marginBottom: 12,\n  },\n}));\n\n// style for the grid\nconst useGridStyles = makeStyles(({ breakpoints }) => ({\n  gridContainer: {\n    maxWidth: '100%',\n    //   paddingLeft: '40px',\n    //   paddingRight: '40px',\n    //  paddingTop: '0px',\n    margin: 'auto',\n    position: 'relative',\n  },\n}));\n\n// card components for different links\nconst CustomCard = ({ classes, image, title, subtitle, path }) => {\n  const cardStyles = useStyles();\n  return (\n    <Card className={classes.card}>\n      <div className={classes.con}>\n        <CardContent className={classes.content}>\n          <div\n            style={{\n              position: 'relative',\n            }}\n          >\n            <CardMedia className={classes.media} image={image} />\n            <div\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                //  transform: 'translateX(25%)'\n              }}\n            >\n              <Typography\n                className={classes.title}\n                variant={'h4'}\n                component={'h4'}\n              >\n                {title}\n              </Typography>\n              <Typography className={classes.subtitle}>{subtitle}</Typography>\n              <CardActions>\n                <Link to={path}>\n                  <Button renderAs='button'>Klicke hier</Button>\n                </Link>\n              </CardActions>\n            </div>\n          </div>\n        </CardContent>\n      </div>\n    </Card>\n  );\n};\n\n// place the card on a grid\nexport default function Dashboard() {\n  const cardStyles = useStyles();\n  const gridStyles = useGridStyles();\n\n  return (\n    <Grid\n      container\n      //  direction=\"row\"\n      spacing={0}\n      className={gridStyles.gridContainer}\n      justify='center'\n    >\n      <Title title='Hessisches Landesmusuem' />\n      <Grid item md>\n        <CustomCard\n          classes={cardStyles}\n          title={'Benutzer'}\n          subtitle={'Verwalte Benutzer*innen'}\n          image={\n            'https://www.geschichte.tu-darmstadt.de/media/geschichte/ifg/didaktik/geschichtsdidaktik_bilder/01_1180x0.png'\n          }\n          path='/Benutzer'\n        />\n        <CustomCard\n          classes={cardStyles}\n          title={'Touren'}\n          subtitle={'Erstelle Touren'}\n          image={\n            'https://www.geschichte.tu-darmstadt.de/media/geschichte/ifg/didaktik/geschichtsdidaktik_bilder/02_376x376.png'\n          }\n          path='/Touren'\n        />\n      </Grid>\n      <Grid item md>\n        <CustomCard\n          classes={cardStyles}\n          title={'Exponate'}\n          subtitle={'Bearbeite Exponate'}\n          image={\n            'https://www.geschichte.tu-darmstadt.de/media/geschichte/ifg/didaktik/geschichtsdidaktik_bilder/05_versionKlein_376x376.png'\n          }\n          path='/Exponate'\n        />\n        <CustomCard\n          classes={cardStyles}\n          title={'Abzeichen'}\n          subtitle={'Füge neue Abzeichen hinzu'}\n          image={\n            'https://www.geschichte.tu-darmstadt.de/media/geschichte/ifg/didaktik/geschichtsdidaktik_bilder/03_376x376.png'\n          }\n          path='/Abzeichen'\n        />\n      </Grid>\n    </Grid>\n  );\n}","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/Style/Theme.js",[],"/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/containers/dataProvider.js",["90","91"],"/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/Touren.js",["92"],"import React from 'react';\nimport {\n  List,\n  Edit,\n  Create,\n  Datagrid,\n  SimpleForm,\n  SingleFieldList,\n  //options\n  SimpleFormIterator,\n  Filter,\n  EditButton,\n  Show,\n  SimpleShowLayout,\n  //validation\n  minValue,\n  maxValue,\n  number,\n  //actions\n  useListContext,\n  TopToolbar,\n  CreateButton,\n  ExportButton,\n  sanitizeListRestProps,\n  //fields\n  TextField,\n  ReferenceField,\n  ReferenceArrayField,\n  DateField,\n  NumberField,\n  ChipField,\n  ArrayField,\n  BooleanField,\n  UrlField,\n  //inputs\n  SelectInput,\n  ImageInput,\n  ReferenceArrayInput,\n  SelectArrayInput,\n  SearchInput,\n  ReferenceInput,\n  NumberInput,\n  ArrayInput,\n  BooleanInput,\n  DateInput,\n  TextInput,\n} from 'react-admin';\n// material UI styles\nimport { Button } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/core/styles';\n\n// filter the tours (search for text)\n// TODO: filter Ersteller der Tour\n// filter for featured tours (todo, not working yet)\nconst FilterBar = (props) => (\n  <div>\n    <Filter {...props}>\n      <SearchInput source='q' alwaysOn />\n      <SelectInput\n        source='status'\n        choices={[\n          { id: 'freigegeben', name: 'freigegeben' },\n          { id: 'ausstehend', name: 'ausstehend' },\n          { id: 'privat', name: 'privat' },\n        ]}\n        alwaysOn\n      />\n      <ReferenceInput\n        source='user'\n        reference='Benutzer'\n        label='Ersteller'\n        alwaysOn\n      >\n        <SelectInput optionText='username' />\n      </ReferenceInput>\n      <NumberInput\n        source='difficulty'\n        label='Schwierigkeitsgrad'\n        validate={validateDifficulty}\n        alwaysOn\n      />\n      <DateInput\n        source='lastEdit'\n        label='letzte Bearbeitung'\n        options={{ format: 'DD/MM/YYYY' }}\n        alwaysOn\n      />\n    </Filter>\n    <Button\n      variant='contained'\n      size='small'\n      startIcon={<DeleteIcon />}\n      onClick={() => props.setFilters({})}\n    >\n      Alle Filter zurücksetzen\n    </Button>\n  </div>\n);\n\n//solution for removing reset button from action bar (doesnt have functionality there)\nconst ListActions = (props) => {\n  const { className, exporter, filters, maxResults, ...rest } = props;\n  const {\n    currentSort,\n    resource,\n    filterValues,\n    basePath,\n    total,\n  } = useListContext();\n  return (\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\n      <CreateButton basePath={basePath} />\n      <ExportButton\n        disabled={total === 0}\n        resource={resource}\n        sort={currentSort}\n        filterValues={filterValues}\n        maxResults={maxResults}\n      />\n    </TopToolbar>\n  );\n};\n\n//edit expand component\n//TODO: get information about stations (from the video) and model them\nconst StationShow = (props) => (\n  <Show\n    {...props}\n    /* disable the app title change when shown */\n    title=' '\n  >\n    <SimpleShowLayout>\n      <ArrayField source='Stationen'>\n        <Datagrid>\n          {/*  if no object is there it is an individual slide and foto, text, details should be deactivated */}\n          <TextField source='Objekt' />\n          <TextField source='Foto' />\n          <TextField source='Text' />\n          <TextField source='Details' />\n          <TextField source='Textfeld' />\n          <UrlField source='Bild' />\n          {/*  model a question */}\n          <ArrayField source='???' label='Fragen'>\n            <Datagrid>\n              <TextField source='question' label='Frage' />\n              <ReferenceArrayField\n                label='verlinkte Objekte'\n                reference='Exponate'\n                source='linked_objects'\n              >\n                <SingleFieldList>\n                  <ChipField source='title' label='Name' />\n                </SingleFieldList>\n              </ReferenceArrayField>\n            </Datagrid>\n          </ArrayField>\n          {/*  model an answer */}\n          <ArrayField source='???' label='Antworten'>\n            <Datagrid>\n              <TextField source='answer' label='Antwort' />\n              <ReferenceArrayField\n                label='verlinkte User'\n                reference='User'\n                source='user'\n              >\n                <SingleFieldList>\n                  <ChipField source='username' label='Benutzer' />\n                </SingleFieldList>\n              </ReferenceArrayField>\n            </Datagrid>\n          </ArrayField>\n        </Datagrid>\n      </ArrayField>\n    </SimpleShowLayout>\n  </Show>\n);\n\n// TODO: create border to devide the component from the filters (spacing)\nconst useStyles = makeStyles({\n  main: {\n    marginTop: 20,\n  },\n});\n\n// create a range withing the Difficulty can be selected\nconst validateDifficulty = [number(), minValue(1), maxValue(5)];\n\n// list existing tours\nexport const TourenList = (props) => {\n  const classes = useStyles(props);\n  return (\n    <List\n      {...props}\n      title='Touren'\n      filters={<FilterBar />}\n      actions={<ListActions />}\n      classes={{ main: classes.main }}\n    >\n      <Datagrid expand={<StationShow />}>\n        {/* TODO: Whats the primaery key? replace Titel for pk or use built in  */}\n        <TextField source='_id' label='ID' />\n        <TextField source='name' label='Titel' />\n        <TextField source='description' label='Beschreibung' />\n        {/* refField: source=field in this table, reference=Name of reference Table  */}\n        <ReferenceField source='owner' reference='Benutzer' label='Ersteller'>\n          <ChipField source='username' />\n        </ReferenceField>\n        <ReferenceArrayField\n          label='Benutzer'\n          reference='Benutzer'\n          source='user'\n        >\n          <SingleFieldList>\n            <ChipField source='username' />\n          </SingleFieldList>\n        </ReferenceArrayField>\n        <TextField source='search_id' label='Touren Code' />\n        <TextField source='session_id' label='Passwort' />\n        <DateField\n          source='lastEdit'\n          label='letzte Bearbeitung'\n          options={{ format: 'DD/MM/YYYY' }}\n        />\n        <NumberField source='difficulty' label='Schwierigkeitsgrad' />\n        <ChipField source='status' label='Status' />\n        <EditButton />\n      </Datagrid>\n    </List>\n  );\n};\n\n// edit a tour\nexport const TourenEdit = (props) => (\n  <Edit title='Bearbeite Touren' {...props}>\n    <SimpleForm warnWhenUnsavedChanges>\n      <TextInput disabled source='ID' />\n      <TextInput source='name' label='Titel' />\n      <TextInput source='description' label='Beschreibung' />\n      <ReferenceInput source='user' reference='Benutzer' label='Ersteller'>\n        <SelectInput optionText='username' />\n      </ReferenceInput>\n      <ReferenceArrayInput source='user' reference='Benutzer'>\n        <SelectArrayInput optionText='username' />\n      </ReferenceArrayInput>\n      <TextInput source='search_id' label='Touren Code' />\n      <TextInput source='session_id' label='Passwort' />\n      <DateInput\n        source='lastEdit'\n        label='letzte Bearbeitung'\n        options={{ format: 'DD/MM/YYYY' }}\n      />\n      <NumberInput\n        source='difficulty'\n        label='Schwierigkeitsgrad'\n        validate={validateDifficulty}\n      />\n      <SelectInput\n        source='Status'\n        choices={[\n          { id: 'freigegeben', name: 'freigegeben' },\n          { id: 'ausstehend', name: 'ausstehend' },\n          { id: 'privat', name: 'privat' },\n        ]}\n      />\n      {/*  TODO: model the different stations and translate them into edit Inputs*/}\n      <ArrayInput source='Stationen'>\n        <SimpleFormIterator>\n          <TextField source='Objekt' />\n          <BooleanInput source='Foto' />\n          <BooleanInput source='Text' />\n          <BooleanInput source='Details' />\n          <TextInput source='Textfeld' />\n          <ArrayInput source='Fragen'>\n            <SimpleFormIterator>\n              <TextInput source='Antwort' />\n              <BooleanInput source='Antwort' />\n            </SimpleFormIterator>\n          </ArrayInput>\n          <ImageInput source='Bild' />\n        </SimpleFormIterator>\n      </ArrayInput>\n    </SimpleForm>\n  </Edit>\n);\n\n// create a new tour\n// todo: ID should not be created manually but automatically (distinct id)\nexport const TourenCreate = (props) => (\n  <Create title='Erstelle Touren' {...props}>\n    <SimpleForm warnWhenUnsavedChanges>\n      <TextInput disabled source='ID' />\n      <TextInput source='name' label='Titel' />\n      <TextInput source='description' label='Beschreibung' />\n      <ReferenceInput source='user' reference='Benutzer' label='Ersteller'>\n        <SelectInput optionText='username' />\n      </ReferenceInput>\n      <ReferenceArrayInput source='user' reference='Benutzer'>\n        <SelectArrayInput optionText='username' />\n      </ReferenceArrayInput>\n      <TextInput source='search_id' label='Touren Code' />\n      <TextInput source='session_id' label='Passwort' />\n      <DateInput\n        source='lastEdit'\n        label='letzte Bearbeitung'\n        options={{ format: 'DD/MM/YYYY' }}\n      />\n      <NumberInput\n        source='difficulty'\n        label='Schwierigkeitsgrad'\n        validate={validateDifficulty}\n      />\n      <SelectInput\n        source='Status'\n        choices={[\n          { id: 'freigegeben', name: 'freigegeben' },\n          { id: 'ausstehend', name: 'ausstehend' },\n          { id: 'privat', name: 'privat' },\n        ]}\n      />\n      {/*  TODO: model the different stations and translate them into edit Inputs*/}\n      <ArrayInput source='Stationen'>\n        <SimpleFormIterator>\n          <TextField source='Objekt' />\n          <BooleanInput source='Foto' />\n          <BooleanInput source='Text' />\n          <BooleanInput source='Details' />\n          <TextInput source='Textfeld' />\n          <ArrayInput source='Fragen'>\n            <SimpleFormIterator>\n              <TextInput source='Antwort' />\n              <BooleanInput source='Antwort' />\n            </SimpleFormIterator>\n          </ArrayInput>\n          <ImageInput source='Bild' />\n        </SimpleFormIterator>\n      </ArrayInput>\n    </SimpleForm>\n  </Create>\n);\n","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/Exponate.js",["93","94"],"/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/User.js",["95"],"/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/ProfilePicutre.js",["96"],"import React from 'react';\nimport { Fragment } from 'react';\nimport {\n  List,\n  Datagrid,\n  UrlField,\n  ImageField,\n  BooleanField,\n  ImageInput,\n  BooleanInput,\n  EditButton,\n  Edit,\n  SimpleForm,\n  Create,\n  SimpleShowLayout,\n  Show,\n  TextField,\n  TextInput,\n} from 'react-admin';\n\n// edit expand component\nconst ImageShow = (props) => (\n  <Show\n    {...props}\n    /* disable the app title change when shown */\n    title=' '\n  >\n    <SimpleShowLayout>\n      <ImageField source='picture' />\n      <UrlField source='picture' label='Url' />\n    </SimpleShowLayout>\n  </Show>\n);\n\n// list existing badges\nexport const PictureList = (props) => (\n  <List {...props} title='Abzeichen'>\n    <Datagrid expand={<ImageShow />}>\n      <TextField source='name' label='Name' />\n      <BooleanField source='locked' label='gesperrt' />\n      <EditButton />\n    </Datagrid>\n  </List>\n);\n\n// edit badges\nexport const PictureEdit = (props) => (\n  <Edit title='Verändere Profilbilder' {...props}>\n    <SimpleForm>\n      <TextInput source='name' label='Name' fullWidth />\n      <ImageInput source='ProfilePicture' accept='image/*'>\n        <ImageField source='picture' />\n      </ImageInput>\n      <BooleanInput label='gesperrt' source='locked' />\n    </SimpleForm>\n  </Edit>\n);\n\n// create a new badge\nexport const PictureCreate = (props) => (\n  <Create title='Lade Profilbilder hoch' {...props}>\n    <SimpleForm>\n      <TextInput source='name' label='Name' fullWidth />\n      <ImageInput source='ProfilePicture' accept='image/*'>\n        <ImageField source='picture' />\n      </ImageInput>\n      <BooleanInput label='gesperrt' source='locked' />\n    </SimpleForm>\n  </Create>\n);\n","/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/Codes.js",["97","98","99","100"],"/home/anna/Dokumente/Projects/BPProject/Test-Gitlab/test-app/src/app/components/Tour_Feedback.js",[],{"ruleId":"101","severity":1,"message":"102","line":7,"column":27,"nodeType":"103","messageId":"104","endLine":7,"endColumn":33},{"ruleId":"101","severity":1,"message":"105","line":8,"column":8,"nodeType":"103","messageId":"104","endLine":8,"endColumn":19},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"101","severity":1,"message":"102","line":2,"column":27,"nodeType":"103","messageId":"104","endLine":2,"endColumn":33},{"ruleId":"101","severity":1,"message":"110","line":3,"column":20,"nodeType":"103","messageId":"104","endLine":3,"endColumn":24},{"ruleId":"106","replacedBy":"111"},{"ruleId":"108","replacedBy":"112"},{"ruleId":"101","severity":1,"message":"113","line":1,"column":17,"nodeType":"103","messageId":"104","endLine":1,"endColumn":26},{"ruleId":"101","severity":1,"message":"114","line":2,"column":8,"nodeType":"103","messageId":"104","endLine":2,"endColumn":18},{"ruleId":"101","severity":1,"message":"105","line":9,"column":10,"nodeType":"103","messageId":"104","endLine":9,"endColumn":21},{"ruleId":"101","severity":1,"message":"115","line":6,"column":3,"nodeType":"103","messageId":"104","endLine":6,"endColumn":11},{"ruleId":"101","severity":1,"message":"116","line":9,"column":3,"nodeType":"103","messageId":"104","endLine":9,"endColumn":17},{"ruleId":"101","severity":1,"message":"117","line":21,"column":3,"nodeType":"103","messageId":"104","endLine":21,"endColumn":13},{"ruleId":"101","severity":1,"message":"118","line":22,"column":3,"nodeType":"103","messageId":"104","endLine":22,"endColumn":18},{"ruleId":"101","severity":1,"message":"119","line":23,"column":3,"nodeType":"103","messageId":"104","endLine":23,"endColumn":22},{"ruleId":"101","severity":1,"message":"120","line":24,"column":3,"nodeType":"103","messageId":"104","endLine":24,"endColumn":19},{"ruleId":"101","severity":1,"message":"121","line":6,"column":16,"nodeType":"103","messageId":"104","endLine":6,"endColumn":21},{"ruleId":"101","severity":1,"message":"122","line":64,"column":9,"nodeType":"103","messageId":"104","endLine":64,"endColumn":19},{"ruleId":"101","severity":1,"message":"123","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":26},{"ruleId":"101","severity":1,"message":"124","line":2,"column":8,"nodeType":"103","messageId":"104","endLine":2,"endColumn":26},{"ruleId":"101","severity":1,"message":"125","line":33,"column":3,"nodeType":"103","messageId":"104","endLine":33,"endColumn":15},{"ruleId":"101","severity":1,"message":"126","line":22,"column":3,"nodeType":"103","messageId":"104","endLine":22,"endColumn":12},{"ruleId":"101","severity":1,"message":"117","line":23,"column":3,"nodeType":"103","messageId":"104","endLine":23,"endColumn":13},{"ruleId":"101","severity":1,"message":"127","line":59,"column":7,"nodeType":"103","messageId":"104","endLine":59,"endColumn":21},{"ruleId":"101","severity":1,"message":"128","line":2,"column":10,"nodeType":"103","messageId":"104","endLine":2,"endColumn":18},{"ruleId":"101","severity":1,"message":"129","line":4,"column":3,"nodeType":"103","messageId":"104","endLine":4,"endColumn":7},{"ruleId":"101","severity":1,"message":"125","line":10,"column":3,"nodeType":"103","messageId":"104","endLine":10,"endColumn":15},{"ruleId":"101","severity":1,"message":"130","line":14,"column":8,"nodeType":"103","messageId":"104","endLine":14,"endColumn":16},{"ruleId":"101","severity":1,"message":"131","line":15,"column":8,"nodeType":"103","messageId":"104","endLine":15,"endColumn":17},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'CssBaseline' is defined but never used.","no-native-reassign",["132"],"no-negated-in-lhs",["133"],"'Link' is defined but never used.",["132"],["133"],"'Component' is defined but never used.","'AcUnitIcon' is defined but never used.","'UrlField' is defined but never used.","'ReferenceField' is defined but never used.","'ArrayField' is defined but never used.","'SingleFieldList' is defined but never used.","'ReferenceArrayInput' is defined but never used.","'SelectArrayInput' is defined but never used.","'Paper' is defined but never used.","'cardStyles' is assigned a value but never used.","'simpleRestProvider' is defined but never used.","'jsonServerProvider' is defined but never used.","'BooleanField' is defined but never used.","'ChipField' is defined but never used.","'optionRenderer' is assigned a value but never used.","'Fragment' is defined but never used.","'Edit' is defined but never used.","'DoneIcon' is defined but never used.","'ClearIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]
